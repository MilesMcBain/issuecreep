% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/search.R
\name{repo_issues}
\alias{repo_issues}
\alias{repo_prs}
\alias{my_issues}
\alias{issues_with_me}
\alias{my_prs}
\alias{prs_with_me}
\alias{prs_for_me}
\alias{issues_for_me}
\alias{gh_for_me}
\alias{issues}
\title{Search Issues and PRs and present results in Rmarkdown}
\usage{
repo_issues(
  repos = get_repo_remote(),
  query_description =
    glue::glue("repository issues for {paste(repos, collapse = \\" \\")}"),
  ...
)

repo_prs(
  repos = get_repo_remote(),
  query_description = glue::glue("repository PRs for {paste(repos, collapse = \\" \\")}"),
  ...
)

my_issues(
  author = get_gh_user(),
  query_description = glue::glue("{paste(author, collapse = \\" \\")} issues"),
  ...
)

issues_with_me(
  involves = get_gh_user(),
  query_description = glue::glue("issues with {paste0(involves)}"),
  ...
)

my_prs(
  author = get_gh_user(),
  type = "pr",
  query_description = glue::glue("PRs by {paste0(author)}"),
  ...
)

prs_with_me(
  involves = get_gh_user(),
  type = "pr",
  query_description = glue::glue("PRs with {paste0(involves)}"),
  ...
)

prs_for_me(
  user = get_gh_user(),
  type = "pr",
  query_description = glue::glue("PRs for {paste0(user)}"),
  extra_params = glue::glue("user:{user}"),
  ...
)

issues_for_me(
  user = get_gh_user(),
  type = "issue",
  query_description = glue::glue("Issues for {paste0(user)}"),
  extra_params = glue::glue("user:{user}"),
  ...
)

gh_for_me(
  user = get_gh_user(),
  type = NULL,
  query_description = glue::glue("Issues and PRs for {paste0(user)}"),
  extra_params = glue::glue("user:{user}"),
  ...
)

issues(
  repos = NULL,
  search_query = NULL,
  type = "issue",
  search_in = c("title", "body"),
  author = NULL,
  involves = NULL,
  is_open = TRUE,
  label = NULL,
  query_description = NULL,
  order = "desc",
  extra_params = NULL
)
}
\arguments{
\item{repos}{a character vector issue repositories to get issues from. "owner/repo"
and "repo" are allowed, with the repo resolved against
installed R packages and CRAN in the latter case.}

\item{query_description}{describe this query (appears in Rmarkdown results). Useful for building higher level functionality.}

\item{...}{arguments passed to \code{\link[=issues]{issues()}}}

\item{author}{a character vector of issue authors to return issues by.}

\item{involves}{a character vector of users to find in issue/PR threads, filtering returned results.}

\item{type}{\code{"issue"} or \code{"pr"} or NULL for both kinds.}

\item{user}{the user to return issues or PRs for}

\item{extra_params}{a character vector of extra query parameters that are passed verbatim to the github API. This take the form \code{"key:value"} e.g. \code{org:reditorsupport}.}

\item{search_query}{a character string to search for in issue titles and bodies.}

\item{search_in}{where to apply \verb{search query}. Any combination of \code{"title"} or \code{"body"}. The default is \code{c("title", "body")} for both.}

\item{is_open}{TRUE for open issues, FALSE for closed, NULL for both.}

\item{label}{a character vector of issue labels to filter reutrned results.}

\item{order}{\code{"asc"} or \code{"desc"} - the ordering of search results by last update date.}
}
\description{
\code{issues()} and its user-friendly wrappers are designed to allow you quick
access to lists of issues and PRs that you can use as a jumping off point for
exploring Rmarkdown issue threads.
}
\details{
Results are paged according to \code{getOption('issue_search_results_per_page')}.

Navigate between pages with \code{\link[=issue_search_results_forward]{issue_search_results_forward()}} and \code{\link[=issue_search_results_backward]{issue_search_results_backward()}}.

Previw an issue thread inline with search results with \code{\link[=issue_search_results_expand]{issue_search_results_expand()}}.

Use \code{\link[=jump_to_issue_thread]{jump_to_issue_thread()}} to jump to an Rmarkdown thread based on the
cursor position or \code{\link[=jump_to_issue_webpage]{jump_to_issue_webpage()}} to jump to the web.
}
\section{Functions}{
\itemize{
\item \code{repo_issues()}: issues for the local repository

\item \code{repo_prs()}: PRs for the local repository

\item \code{my_issues()}: issues authored by you

\item \code{issues_with_me()}: issues referring to you

\item \code{my_prs()}: PRs by you

\item \code{prs_with_me()}: PRs referring to you

\item \code{prs_for_me()}: PRs in repositories you own

\item \code{issues_for_me()}: issues in repositories you own

\item \code{gh_for_me()}: all issues and PRs in repositories you own.

}}
